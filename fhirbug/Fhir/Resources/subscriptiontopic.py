#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 4.3.0 (http://hl7.org/fhir/StructureDefinition/SubscriptionTopic) on 2022-12-14.
#  2022, SMART Health IT.
##


from . import domainresource

class SubscriptionTopic(domainresource.DomainResource):
    """ The definition of a specific topic for triggering events within the
    Subscriptions framework.

    Describes a stream of resource state changes or events and annotated with
    labels useful to filter projections from this topic.
    """

    resource_type = "SubscriptionTopic"

    def __init__(self, jsondict=None, strict=True, **kwargs):
        """ Initialize all valid properties.

        :raises: FHIRValidationError on validation errors, unless strict is False
        :param dict jsondict: A JSON dictionary to use for initialization
        :param bool strict: If True (the default), invalid variables will raise a TypeError
        """

        self.url = None
        """ Canonical identifier for this subscription topic definition,
        represented as a URI (globally unique).
        Type `str`. """

        self.identifier = None
        """ Business Identifier for this subscription topic.
        List of `Identifier` items (represented as `dict` in JSON). """

        self.version = None
        """ Business version of the subscription topic.
        Type `str`. """

        self.title = None
        """ Name for this subscription topic (Human friendly).
        Type `str`. """

        self.derivedFrom = None
        """ Based on FHIR protocol or definition.
        List of `str` items. """

        self.status = None
        """ draft | active | retired | unknown.
        Type `str`. """

        self.experimental = None
        """ If for testing purposes, not real usage.
        Type `bool`. """

        self.date = None
        """ Date status first applied.
        Type `FHIRDate` (represented as `str` in JSON). """

        self.publisher = None
        """ The name of the individual or organization that published the
        SubscriptionTopic.
        Type `str`. """

        self.contact = None
        """ Contact details for the publisher.
        List of `ContactDetail` items (represented as `dict` in JSON). """

        self.description = None
        """ Natural language description of the SubscriptionTopic.
        Type `str`. """

        self.useContext = None
        """ Content intends to support these contexts.
        List of `UsageContext` items (represented as `dict` in JSON). """

        self.jurisdiction = None
        """ Intended jurisdiction of the SubscriptionTopic (if applicable).
        List of `CodeableConcept` items (represented as `dict` in JSON). """

        self.purpose = None
        """ Why this SubscriptionTopic is defined.
        Type `str`. """

        self.copyright = None
        """ Use and/or publishing restrictions.
        Type `str`. """

        self.approvalDate = None
        """ When SubscriptionTopic is/was approved by publisher.
        Type `FHIRDate` (represented as `str` in JSON). """

        self.lastReviewDate = None
        """ Date the Subscription Topic was last reviewed by the publisher.
        Type `FHIRDate` (represented as `str` in JSON). """

        self.effectivePeriod = None
        """ The effective date range for the SubscriptionTopic.
        Type `Period` (represented as `dict` in JSON). """

        self.resourceTrigger = None
        """ Definition of a resource-based trigger for the subscription topic.
        List of `SubscriptionTopicResourceTrigger` items (represented as `dict` in JSON). """

        self.eventTrigger = None
        """ Event definitions the SubscriptionTopic.
        List of `SubscriptionTopicEventTrigger` items (represented as `dict` in JSON). """

        self.canFilterBy = None
        """ Properties by which a Subscription can filter notifications from
        the SubscriptionTopic.
        List of `SubscriptionTopicCanFilterBy` items (represented as `dict` in JSON). """

        self.notificationShape = None
        """ Properties for describing the shape of notifications generated by
        this topic.
        List of `SubscriptionTopicNotificationShape` items (represented as `dict` in JSON). """

        super(SubscriptionTopic, self).__init__(jsondict=jsondict, strict=strict, **kwargs)

    def elementProperties(self):
        js = super(SubscriptionTopic, self).elementProperties()
        js.extend([
            ("url", "url", str, False, None, True),
            ("identifier", "identifier", identifier.Identifier, True, None, False),
            ("version", "version", str, False, None, False),
            ("title", "title", str, False, None, False),
            ("derivedFrom", "derivedFrom", str, True, None, False),
            ("status", "status", PublicationStatus.str, False, None, True),
            ("experimental", "experimental", bool, False, None, False),
            ("date", "date", fhirdate.FHIRDate, False, None, False),
            ("publisher", "publisher", str, False, None, False),
            ("contact", "contact", contactdetail.ContactDetail, True, None, False),
            ("description", "description", str, False, None, False),
            ("useContext", "useContext", usagecontext.UsageContext, True, None, False),
            ("jurisdiction", "jurisdiction", codeableconcept.CodeableConcept, True, None, False),
            ("purpose", "purpose", str, False, None, False),
            ("copyright", "copyright", str, False, None, False),
            ("approvalDate", "approvalDate", fhirdate.FHIRDate, False, None, False),
            ("lastReviewDate", "lastReviewDate", fhirdate.FHIRDate, False, None, False),
            ("effectivePeriod", "effectivePeriod", period.Period, False, None, False),
            ("resourceTrigger", "resourceTrigger", SubscriptionTopicResourceTrigger, True, None, False),
            ("eventTrigger", "eventTrigger", SubscriptionTopicEventTrigger, True, None, False),
            ("canFilterBy", "canFilterBy", SubscriptionTopicCanFilterBy, True, None, False),
            ("notificationShape", "notificationShape", SubscriptionTopicNotificationShape, True, None, False),
        ])
        return js


from . import backboneelement

class SubscriptionTopicCanFilterBy(backboneelement.BackboneElement):
    """ Properties by which a Subscription can filter notifications from the
    SubscriptionTopic.

    List of properties by which Subscriptions on the SubscriptionTopic can be
    filtered. May be defined Search Parameters (e.g., Encounter.patient) or
    parameters defined within this SubscriptionTopic context (e.g., hub.event).
    """

    def __init__(self, jsondict=None, strict=True, **kwargs):
        """ Initialize all valid properties.

        :raises: FHIRValidationError on validation errors, unless strict is False
        :param dict jsondict: A JSON dictionary to use for initialization
        :param bool strict: If True (the default), invalid variables will raise a TypeError
        """

        self.description = None
        """ Description of this filter parameter.
        Type `str`. """

        self.resource = None
        """ URL of the triggering Resource that this filter applies to.
        Type `str`. """

        self.filterParameter = None
        """ Human-readable and computation-friendly name for a filter parameter
        usable by subscriptions on this topic, via
        Subscription.filterBy.filterParameter.
        Type `str`. """

        self.filterDefinition = None
        """ Canonical URL for a filterParameter definition.
        Type `str`. """

        self.modifier = None
        """ = | eq | ne | gt | lt | ge | le | sa | eb | ap | above | below | in
        | not-in | of-type.
        List of `str` items. """

        super(SubscriptionTopicCanFilterBy, self).__init__(jsondict=jsondict, strict=strict, **kwargs)

    def elementProperties(self):
        js = super(SubscriptionTopicCanFilterBy, self).elementProperties()
        js.extend([
            ("description", "description", str, False, None, False),
            ("resource", "resource", str, False, None, False),
            ("filterParameter", "filterParameter", str, False, None, True),
            ("filterDefinition", "filterDefinition", str, False, None, False),
            ("modifier", "modifier", SubscriptionSearchModifer.str, True, None, False),
        ])
        return js


class SubscriptionTopicEventTrigger(backboneelement.BackboneElement):
    """ Event definitions the SubscriptionTopic.

    Event definition which can be used to trigger the SubscriptionTopic.
    """

    def __init__(self, jsondict=None, strict=True, **kwargs):
        """ Initialize all valid properties.

        :raises: FHIRValidationError on validation errors, unless strict is False
        :param dict jsondict: A JSON dictionary to use for initialization
        :param bool strict: If True (the default), invalid variables will raise a TypeError
        """

        self.description = None
        """ Text representation of the event trigger.
        Type `str`. """

        self.event = None
        """ Event which can trigger a notification from the SubscriptionTopic.
        Type `CodeableConcept` (represented as `dict` in JSON). """

        self.resource = None
        """ Data Type or Resource (reference to definition) for this trigger
        definition.
        Type `str`. """

        super(SubscriptionTopicEventTrigger, self).__init__(jsondict=jsondict, strict=strict, **kwargs)

    def elementProperties(self):
        js = super(SubscriptionTopicEventTrigger, self).elementProperties()
        js.extend([
            ("description", "description", str, False, None, False),
            ("event", "event", codeableconcept.CodeableConcept, False, None, True),
            ("resource", "resource", str, False, None, True),
        ])
        return js


class SubscriptionTopicNotificationShape(backboneelement.BackboneElement):
    """ Properties for describing the shape of notifications generated by this
    topic.

    List of properties to describe the shape (e.g., resources) included in
    notifications from this Subscription Topic.
    """

    def __init__(self, jsondict=None, strict=True, **kwargs):
        """ Initialize all valid properties.

        :raises: FHIRValidationError on validation errors, unless strict is False
        :param dict jsondict: A JSON dictionary to use for initialization
        :param bool strict: If True (the default), invalid variables will raise a TypeError
        """

        self.resource = None
        """ URL of the Resource that is the focus (main) resource in a
        notification shape.
        Type `str`. """

        self.include = None
        """ Include directives, rooted in the resource for this shape.
        List of `str` items. """

        self.revInclude = None
        """ Reverse include directives, rooted in the resource for this shape.
        List of `str` items. """

        super(SubscriptionTopicNotificationShape, self).__init__(jsondict=jsondict, strict=strict, **kwargs)

    def elementProperties(self):
        js = super(SubscriptionTopicNotificationShape, self).elementProperties()
        js.extend([
            ("resource", "resource", str, False, None, True),
            ("include", "include", str, True, None, False),
            ("revInclude", "revInclude", str, True, None, False),
        ])
        return js


class SubscriptionTopicResourceTrigger(backboneelement.BackboneElement):
    """ Definition of a resource-based trigger for the subscription topic.

    A definition of a resource-based event that triggers a notification based
    on the SubscriptionTopic. The criteria may be just a human readable
    description and/or a full FHIR search string or FHIRPath expression.
    Multiple triggers are considered OR joined (e.g., a resource update
    matching ANY of the definitions will trigger a notification).
    """

    def __init__(self, jsondict=None, strict=True, **kwargs):
        """ Initialize all valid properties.

        :raises: FHIRValidationError on validation errors, unless strict is False
        :param dict jsondict: A JSON dictionary to use for initialization
        :param bool strict: If True (the default), invalid variables will raise a TypeError
        """

        self.description = None
        """ Text representation of the resource trigger.
        Type `str`. """

        self.resource = None
        """ Data Type or Resource (reference to definition) for this trigger
        definition.
        Type `str`. """

        self.supportedInteraction = None
        """ create | update | delete.
        List of `str` items. """

        self.queryCriteria = None
        """ Query based trigger rule.
        Type `SubscriptionTopicResourceTriggerQueryCriteria` (represented as `dict` in JSON). """

        self.fhirPathCriteria = None
        """ FHIRPath based trigger rule.
        Type `str`. """

        super(SubscriptionTopicResourceTrigger, self).__init__(jsondict=jsondict, strict=strict, **kwargs)

    def elementProperties(self):
        js = super(SubscriptionTopicResourceTrigger, self).elementProperties()
        js.extend([
            ("description", "description", str, False, None, False),
            ("resource", "resource", str, False, None, True),
            ("supportedInteraction", "supportedInteraction", FHIRRestfulInteractions.str, True, None, False),
            ("queryCriteria", "queryCriteria", SubscriptionTopicResourceTriggerQueryCriteria, False, None, False),
            ("fhirPathCriteria", "fhirPathCriteria", str, False, None, False),
        ])
        return js


class SubscriptionTopicResourceTriggerQueryCriteria(backboneelement.BackboneElement):
    """ Query based trigger rule.

    The FHIR query based rules that the server should use to determine when to
    trigger a notification for this subscription topic.
    """

    def __init__(self, jsondict=None, strict=True, **kwargs):
        """ Initialize all valid properties.

        :raises: FHIRValidationError on validation errors, unless strict is False
        :param dict jsondict: A JSON dictionary to use for initialization
        :param bool strict: If True (the default), invalid variables will raise a TypeError
        """

        self.previous = None
        """ Rule applied to previous resource state.
        Type `str`. """

        self.resultForCreate = None
        """ test-passes | test-fails.
        Type `str`. """

        self.current = None
        """ Rule applied to current resource state.
        Type `str`. """

        self.resultForDelete = None
        """ test-passes | test-fails.
        Type `str`. """

        self.requireBoth = None
        """ Both must be true flag.
        Type `bool`. """

        super(SubscriptionTopicResourceTriggerQueryCriteria, self).__init__(jsondict=jsondict, strict=strict, **kwargs)

    def elementProperties(self):
        js = super(SubscriptionTopicResourceTriggerQueryCriteria, self).elementProperties()
        js.extend([
            ("previous", "previous", str, False, None, False),
            ("resultForCreate", "resultForCreate", CriteriaNotExistsBehavior.str, False, None, False),
            ("current", "current", str, False, None, False),
            ("resultForDelete", "resultForDelete", CriteriaNotExistsBehavior.str, False, None, False),
            ("requireBoth", "requireBoth", bool, False, None, False),
        ])
        return js


import sys
try:
    from . import CriteriaNotExistsBehavior
except ImportError:
    CriteriaNotExistsBehavior = sys.modules[__package__ + '.CriteriaNotExistsBehavior']
try:
    from . import FHIRRestfulInteractions
except ImportError:
    FHIRRestfulInteractions = sys.modules[__package__ + '.FHIRRestfulInteractions']
try:
    from . import PublicationStatus
except ImportError:
    PublicationStatus = sys.modules[__package__ + '.PublicationStatus']
try:
    from . import SubscriptionSearchModifer
except ImportError:
    SubscriptionSearchModifer = sys.modules[__package__ + '.SubscriptionSearchModifer']
try:
    from . import codeableconcept
except ImportError:
    codeableconcept = sys.modules[__package__ + '.codeableconcept']
try:
    from . import contactdetail
except ImportError:
    contactdetail = sys.modules[__package__ + '.contactdetail']
try:
    from . import fhirdate
except ImportError:
    fhirdate = sys.modules[__package__ + '.fhirdate']
try:
    from . import identifier
except ImportError:
    identifier = sys.modules[__package__ + '.identifier']
try:
    from . import period
except ImportError:
    period = sys.modules[__package__ + '.period']
try:
    from . import usagecontext
except ImportError:
    usagecontext = sys.modules[__package__ + '.usagecontext']